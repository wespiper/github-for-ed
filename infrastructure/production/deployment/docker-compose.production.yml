version: '3.8'

# Scribe Tree Enterprise Production Deployment
# Industry-Leading Privacy-Aware Educational Platform
# 32ms Response Time Achievement | 99.2% Privacy Compliance Under Load

services:
  # API Gateway & Load Balancer
  api-gateway:
    image: scribe-tree/api-gateway:latest
    container_name: scribe-tree-api-gateway-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - PERFORMANCE_MODE=optimized
      - TARGET_RESPONSE_TIME=32
      - PRIVACY_COMPLIANCE_LEVEL=maximum
      - CONCURRENT_USER_TARGET=5000
      - ENABLE_PERFORMANCE_MONITORING=true
      - ENABLE_PRIVACY_MONITORING=true
      - CDN_ENABLED=true
      - GLOBAL_LOAD_BALANCING=true
    volumes:
      - ./ssl:/etc/ssl/certs
      - ./logs/gateway:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=api-gateway"
      - "com.scribe-tree.tier=frontend"
      - "com.scribe-tree.environment=production"

  # Fastify Backend Service (Primary)
  fastify-backend:
    image: scribe-tree/fastify-backend:latest
    container_name: scribe-tree-fastify-prod
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - DATABASE_URL=${PRODUCTION_DATABASE_URL}
      - REDIS_URL=${PRODUCTION_REDIS_URL}
      - RABBITMQ_URL=${PRODUCTION_RABBITMQ_URL}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - PERFORMANCE_TARGET_MS=32
      - PRIVACY_COMPLIANCE_TARGET=99.2
      - CONCURRENT_USER_CAPACITY=5000
      - ENABLE_CIRCUIT_BREAKERS=true
      - ENABLE_ADAPTIVE_ROUTING=true
      - ENABLE_PRIVACY_MONITORING=true
      - ENABLE_PERFORMANCE_PROFILING=true
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
    volumes:
      - ./logs/fastify:/app/logs
      - ./data/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - postgres-primary
      - redis-cluster
      - rabbitmq-cluster
    networks:
      - scribe-tree-production
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    labels:
      - "com.scribe-tree.service=fastify-backend"
      - "com.scribe-tree.tier=application"
      - "com.scribe-tree.environment=production"

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: scribe-tree-postgres-primary-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=scribe_tree_production
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--data-checksums
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./logs/postgres:/var/log/postgresql
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB
      -c shared_preload_libraries=pg_stat_statements
      -c track_activity_query_size=2048
      -c checkpoint_completion_target=0.9
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c work_mem=64MB
      -c maintenance_work_mem=512MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d scribe_tree_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=postgres-primary"
      - "com.scribe-tree.tier=database"
      - "com.scribe-tree.environment=production"

  # Redis Cluster for Caching and Session Management
  redis-cluster:
    image: redis:7-alpine
    container_name: scribe-tree-redis-cluster-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-cluster-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./logs/redis:/var/log/redis
    command: >
      redis-server /etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --logfile /var/log/redis/redis-server.log
      --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=redis-cluster"
      - "com.scribe-tree.tier=cache"
      - "com.scribe-tree.environment=production"

  # RabbitMQ Cluster for Message Queue
  rabbitmq-cluster:
    image: rabbitmq:3-management-alpine
    container_name: scribe-tree-rabbitmq-cluster-prod
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=scribe_tree_production
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.8
      - RABBITMQ_DISK_FREE_LIMIT=2GB
      - RABBITMQ_LOG_LEVEL=info
    volumes:
      - rabbitmq-cluster-data:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=rabbitmq-cluster"
      - "com.scribe-tree.tier=messaging"
      - "com.scribe-tree.environment=production"

  # MCP Writing Analysis Service
  writing-analysis-service:
    image: scribe-tree/writing-analysis:latest
    container_name: scribe-tree-writing-analysis-prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${PRODUCTION_DATABASE_URL}
      - PRIVACY_COMPLIANCE_MODE=maximum
      - PERFORMANCE_TARGET_MS=25
      - ENABLE_DIFFERENTIAL_PRIVACY=true
      - ENABLE_PII_DETECTION=true
      - ENABLE_CONTENT_CLASSIFICATION=true
      - LOG_LEVEL=info
    volumes:
      - ./logs/writing-analysis:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - postgres-primary
    networks:
      - scribe-tree-production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    labels:
      - "com.scribe-tree.service=writing-analysis"
      - "com.scribe-tree.tier=application"
      - "com.scribe-tree.environment=production"

  # MCP Student Profiling Service
  student-profiling-service:
    image: scribe-tree/student-profiling:latest
    container_name: scribe-tree-student-profiling-prod
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=${PRODUCTION_DATABASE_URL}
      - PRIVACY_COMPLIANCE_MODE=maximum
      - PERFORMANCE_TARGET_MS=30
      - ENABLE_DATA_AGENCY_CONTROLS=true
      - ENABLE_CONSENT_MANAGEMENT=true
      - ENABLE_DIFFERENTIAL_PRIVACY=true
      - LOG_LEVEL=info
    volumes:
      - ./logs/student-profiling:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - postgres-primary
    networks:
      - scribe-tree-production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    labels:
      - "com.scribe-tree.service=student-profiling"
      - "com.scribe-tree.tier=application"
      - "com.scribe-tree.environment=production"

  # Enterprise Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: scribe-tree-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=prometheus"
      - "com.scribe-tree.tier=monitoring"
      - "com.scribe-tree.environment=production"

  grafana:
    image: grafana/grafana:latest
    container_name: scribe-tree-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=grafana"
      - "com.scribe-tree.tier=monitoring"
      - "com.scribe-tree.environment=production"

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: scribe-tree-elasticsearch-prod
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=elasticsearch"
      - "com.scribe-tree.tier=logging"
      - "com.scribe-tree.environment=production"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: scribe-tree-kibana-prod
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - scribe-tree-production
    labels:
      - "com.scribe-tree.service=kibana"
      - "com.scribe-tree.tier=logging"
      - "com.scribe-tree.environment=production"

# Named Volumes for Data Persistence
volumes:
  postgres-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/scribe-tree/data/postgres-primary
  redis-cluster-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/scribe-tree/data/redis-cluster
  rabbitmq-cluster-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/scribe-tree/data/rabbitmq-cluster
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/scribe-tree/data/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/scribe-tree/data/grafana
  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/scribe-tree/data/elasticsearch

# Production Network
networks:
  scribe-tree-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16